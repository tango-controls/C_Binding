//==============================================================================
// InterfaceGenerator.ipf
//==============================================================================
// N.Leclercq - SOLEIL
//==============================================================================

//==============================================================================
// USE MODERN GLOBAL ACCESS METHOD
//==============================================================================
#pragma rtGlobals=2

//==============================================================================
// DEPENDENCIES
//==============================================================================
#include "tango"

//==============================================================================
// tango_generate_device_interface
//==============================================================================
function tango_generate_device_interface (generic_int)
	Variable generic_int
	String file_path = tango_get_global_obj("gen_file", kSVAR)
	SVAR file = $file_path
	String prefix_path = tango_get_global_obj("gen_prefix", kSVAR)
	SVAR prefix = $prefix_path
	String device_path = tango_get_global_obj("gen_device", kSVAR)
	SVAR device = $device_path
	String local_file = file
	String local_prefix = prefix
	String  local_device = device
	Prompt local_file, "File name [the name of the <ipf> file]"
	Prompt local_prefix, "Interface Prefix [all generated function name will start with <prefix_>]"
	if (generic_int)
		Prompt  local_device, "Device Name [a device belonging to the family which interface will be generated]"
	else
		Prompt  local_device, "Device Name [the name of the device which interface will be generated]"
	endif
	DoPrompt "Tango Device Interface Generator", local_file, local_prefix, local_device
	file = local_file
	prefix = local_prefix
	device = local_device
	if (V_flag == 1)
		return -1
	endif
	tango_gen_dev_int(local_file, local_prefix, local_device, generic_int)
	//-tango_gen_int_test(local_file, local_prefix, local_device, generic_int)
	return 0
end

//==============================================================================
// tango_generate_device_interface
//==============================================================================
function tango_gen_dev_int (file, prefix, dev_name, generic_int)
	String file
	String prefix
	String dev_name
	Variable generic_int
	//- open destination 
	Variable ref_num
	String ipf_path
	if (tango_generate_open_proc_file(file, prefix, ref_num, ipf_path) == -1)
		return -1
	endif
	//- try to ping the device (must be running)
	if (tango_ping_device(dev_name) == -1)
		String err_str
		err_str   = "Could not generate interface for device <" + dev_name + ">\r" 
		err_str += "Check device name and be sure that it is running."
		tango_display_error_str (err_str)
		tango_generate_close_proc_file(ref_num)
		return -1
	endif
	//- we now need to parse each attribute and command
	//- let's start with the attributes...
	String cur_df = tango_enter_attrs_df (dev_name)
	if (WaveExists(alist) == 0)
		err_str   = "Could not generate interface for device <" + dev_name + ">\r" 
		err_str += "An error occured while trying to access the device attribute list."
		tango_display_error_str (err_str)
		tango_generate_close_proc_file(ref_num)
		return -1
	endif
	//- start code generation
	fprintf ref_num, "//==============================================================================\n"
	fprintf ref_num, "// THIS FILE HAS BEEN GENERATED BY THE TANGO BINDING FOR IGOR PRO - DO NOT EDIT   \n"
	fprintf ref_num, "//==============================================================================\n"
	fprintf ref_num, "// File: %s.ipf - Generated on %s - NL - Synchrotron SOLEIL\n", file, Date() 
	fprintf ref_num, "//==============================================================================\n"
	fprintf ref_num, "\n"
	fprintf ref_num, "//==============================================================================\n"
	fprintf ref_num, "// USE MODERN GLOBAL ACCESS METHOD\n"
	fprintf ref_num, "//==============================================================================\n"
	fprintf ref_num, "#pragma rtGlobals=2\n"
	fprintf ref_num, "\n"
	fprintf ref_num, "//==============================================================================\n"
	fprintf ref_num, "//  DEPENDENCIES\n"
	fprintf ref_num, "//==============================================================================\n"
	fprintf ref_num, "#include \"tango\"\n"
	fprintf ref_num, "\n"
	//- get a reference to the attribute list
	Wave/T  attr_list = alist
	//- get number of attributes
	Variable num_attrs = dimsize(alist, 0)
	Variable i
	//- for each attribute, generate its interface...
	for (i  = 0; i < num_attrs; i+= 1)
		//- alist[i][0] contains the attribute name
		String attr_name = attr_list[i][0]
		//- enter attribute datafolder
		tango_enter_attr_df  (dev_name, attr_name)
		//- get attributre type, access and format
		Variable access = tango_get_attr_access(dev_name, attr_name)
		Variable format = tango_get_attr_format(dev_name, attr_name)
		Variable type = tango_get_attr_type(dev_name, attr_name)
		//- generate set/get code for the i-th attribute
		switch (access)
			case kREAD:
				tango_generate_get_attribute (ref_num, prefix, dev_name, attr_name, format, type, generic_int)
				break
			case kWRITE:
			case kREAD_WRITE:
			case kREAD_WITH_WRITE: 
				tango_generate_set_attribute (ref_num, prefix, dev_name, attr_name, format, type, generic_int)
				tango_generate_get_attribute (ref_num, prefix, dev_name, attr_name, format, type, generic_int)
				break
		endswitch
	endfor
	//- continue with commands...
	tango_enter_cmds_df (dev_name)
	if (WaveExists(clist) == 0)
		err_str   = "Could not generate interface for device <" + dev_name + ">\r" 
		err_str += "An error occured while trying to access the device command list."
		tango_display_error_str (err_str)
		tango_generate_close_proc_file(ref_num)
		return -1
	endif
	//- get a reference to the attribute list
	Wave/T  cmd_list = clist
	//- get number of commands
	Variable num_cmds = dimsize(clist, 0)
	//- for each command, generate its interface...
	for (i  = 0; i < num_cmds; i+= 1)
		//- clist[i][0] contains the command name
		String cmd_name = cmd_list[i][0]
		//- enter attribute datafolder
		tango_enter_cmd_df  (dev_name, cmd_name)
		//- get command arg-in and arg-out
		Variable argin_type = tango_get_cmd_argin_type (dev_name, cmd_name)
		Variable argout_type = tango_get_cmd_argout_type (dev_name, cmd_name)
		//- generate exec code for the i-th comand
		tango_generate_exec_command (ref_num, prefix, dev_name, cmd_name, argin_type, argout_type, generic_int)
	endfor
	//- close the destination file
	tango_generate_close_proc_file(ref_num)
	tango_leave_df(cur_df)
	//- open the generated proc file
	String cmd = "NewPath/O/Q ipf_tmp, \"" + ParseFilePath(1, ipf_path, ":", 1, 0) + "\"\r"
	Execute/Q(cmd)
	cmd = "OpenProc /P=ipf_tmp \"" +  ParseFilePath(0, ipf_path, ":", 1, 0) + "\"\r"
	Execute/Q(cmd)
	return 0
end

//==============================================================================
// tango_generate_set_attribute
//==============================================================================
function  tango_generate_set_attribute (ref_num, prefix, dev_name, attr_name, format, type, generic_int)
	Variable ref_num
	String prefix
	String dev_name
	String attr_name
	Variable format
	Variable type
	Variable generic_int
	String tmp_attr_name = UpperStr(attr_name)[0] + attr_name[1, strlen(attr_name) - 1]
	String func_name = prefix + "Set" + tmp_attr_name
	if (strlen(func_name) > 31)
		print "WARNING: function name <" + func_name + "> is too long - procedure will not compile"
	endif
	fprintf ref_num, "//==============================================================================\n"
	fprintf ref_num, "// %s\n", func_name
	fprintf ref_num, "//==============================================================================\n"
	fprintf ref_num, "//\tFunction......writes the specified value on the <%s> attribute\n", attr_name
	fprintf ref_num, "//\tDev.class.....%s\n", tango_get_device_class (dev_name)
	fprintf ref_num, "//\tAttr.name.....%s\n", attr_name
	String desc = tango_get_attr_desc(dev_name, attr_name)
	Variable pos = strsearch(desc, "\n", 0)
	if (pos != -1)
		desc = desc[0, pos - 1]
	endif
	if (strlen(desc) > 57)
		desc = desc[0, 57] + "..."
	endif
	fprintf ref_num, "//\tAttr.desc.....%s\n", desc
	fprintf ref_num, "//\tAttr.Access...%s\n", tango_get_attr_access_str(tango_get_attr_access(dev_name, attr_name))
	fprintf ref_num, "//\tAttr.Format...%s\n", tango_get_attr_format_str(format)
	fprintf ref_num, "//\tAttr.Type.....%s\n", tango_get_attr_type_str(format, type)
	fprintf ref_num, "//\tExample.......the following code shows how to use this function\n"
	fprintf ref_num, "//------------------------------------------------------------------------------\n" 
	fprintf ref_num, "//\tfunction myFunction ()\n"
	if (generic_int)
		fprintf ref_num, "//\t\t//- the name of the target device\n"
		fprintf ref_num, "//\t\tString dev_name = \"my/tango/device\"\n"
	endif
	switch (format)
		case kSCALAR:
			fprintf ref_num, "//\t\t//- specify the attribute value (i.e. the value to be applied)\n"
			switch (type)
				case kSTRING:
					fprintf ref_num, "//\t\t//- this value can be stored into a local or a global variable\n"
					fprintf ref_num, "//\t\tString attr_value = root:mydatafolder:my_%s_value\n", LowerStr(attr_name)
					fprintf ref_num, "//\t\t//- change the value of our global string\n"
					fprintf ref_num, "//\t\tattr_value = \"my attribute text\"\n"
					break 
				default:
					fprintf ref_num, "//\t\t//- this value can be stored into a local or a global variable\n"
					fprintf ref_num, "//\t\tNVAR attr_value = root:mydatafolder:my_%s_value\n", LowerStr(attr_name)
					fprintf ref_num, "//\t\t//- change the value of our global variable\n"
					switch (type)
						case kBOOL:
							fprintf ref_num, "//\t\tattr_value = 1\n"
							break
						case kCHAR:
							fprintf ref_num, "//\t\tattr_value = 256\n"
							break
						case kUCHAR:
							fprintf ref_num, "//\t\tattr_value = -127\n"
							break
						case kSHORT:
							fprintf ref_num, "//\t\tattr_value = 4096\n"
							break
						case kUSHORT:
							fprintf ref_num, "//\t\tattr_value = -4096\n"
							break
						case kLONG:
							fprintf ref_num, "//\t\tattr_value = -100000\n"
							break
						case kULONG:
							fprintf ref_num, "//\t\tattr_value = 100000\n"
							break
						case kFLOAT:
						case kDOUBLE:
							fprintf ref_num, "//\t\tattr_value = 123456.789\n"
							break
					endswitch
					break 
			endswitch
			fprintf ref_num, "//\t\t//- apply the value and check error\n"
			if (generic_int)
				fprintf ref_num, "//\t\tif (%s(dev_name, attr_value) == -1)\n", func_name
			else
				fprintf ref_num, "//\t\tif (%s(attr_value) == -1)\n", func_name
			endif
			break
		case kSPECTRUM:
			fprintf ref_num, "//\t\t//- specify the path to the 1D source wave (i.e. value to apply)\n"
			fprintf ref_num, "//\t\tString wave_path = \"root:mydatafolder\"\n"
			fprintf ref_num, "//\t\t//- build a wave into the source datafolder\n"
			fprintf ref_num, "//\t\tString current_df = tango_enter_df(wave_path)\n"
			fprintf ref_num, "//\t\tString wave_name = \"my_spectrum\"\n"
			fprintf ref_num, "//\t\tMake/O"
			switch (type)
				case kSTRING:
					fprintf ref_num, "/T/N=128 $wave_name = \"none\"\n"
					break
				case kBOOL:
				case kCHAR:
					fprintf ref_num, "/B/N=128 $wave_name = enoise(127)\n"
					break
				case kUCHAR:
					fprintf ref_num, "/U/B/N=128 $wave_name = abs(enoise(127))\n"
					break
				case kSHORT:
					fprintf ref_num, "/W/N=128 $wave_name = enoise(4096)\n"
					break
				case kUSHORT:
					fprintf ref_num, "/U/W/N=128 $wave_name = abs(enoise(4096))\n"
					break
				case kLONG:
					fprintf ref_num, "/I/N=128 $wave_name = enoise(4096)\n"
					break
				case kULONG:
					fprintf ref_num, "/U/I/N=128 $wave_name = abs(enoise(4096))\n"
					break
				case kFLOAT:
					fprintf ref_num, "/N=128 $wave_name = enoise(1.0)\n"
					break
				case kDOUBLE:
					fprintf ref_num, "/D/N=128 $wave_name = enoise(1.0)\n"
					break
			endswitch
			fprintf ref_num, "//\t\t//- leave current df and restore previous\n"
			fprintf ref_num, "//\t\ttango_leave_df(current_df)\n"
			fprintf ref_num, "//\t\t//- build full path to the source wave (i.e. wave location)\n"
			fprintf ref_num, "//\t\twave_path += \":\" + wave_name\n"
			fprintf ref_num, "//\t\t//- apply the value and check error\n"
			if (generic_int)
				fprintf ref_num, "//\t\tif (%s(dev_name, wave_path) == -1)\n", func_name
			else
				fprintf ref_num, "//\t\tif (%s(wave_path) == -1)\n", func_name
			endif
			break
		case kIMAGE:
			fprintf ref_num, "//\t\t//- specify the path to the 2D source wave (i.e. value to apply)\n"
			fprintf ref_num, "//\t\tString wave_path = \"root:mydatafolder\"\n"
			fprintf ref_num, "//\t\t//- build a wave into the source datafolder\n"
			fprintf ref_num, "//\t\tString current_df = tango_enter_df(wave_path)\n"
			fprintf ref_num, "//\t\tString wave_name = \"my_image\"\n"
			fprintf ref_num, "//\t\tMake/O"
			switch (type)
				case kSTRING:
					fprintf ref_num, "/T/N=(128,128) $wave_name = \"none\"\n"
					break
				case kBOOL:
				case kCHAR:
					fprintf ref_num, "/B/N=(128,128) $wave_name = enoise(127)\n"
					break
				case kUCHAR:
					fprintf ref_num, "/U/B/N=(128,128) $wave_name = abs(enoise(127))\n"
					break
				case kSHORT:
					fprintf ref_num, "/W/N=(128,128) $wave_name = enoise(4096)\n"
					break
				case kUSHORT:
					fprintf ref_num, "/U/W/N=(128,128) $wave_name = abs(enoise(4096))\n"
					break
				case kLONG:
					fprintf ref_num, "/I/N=(128,128) $wave_name = enoise(4096)\n"
					break
				case kULONG:
					fprintf ref_num, "/U/I/N=(128,128) $wave_name = abs(enoise(4096))\n"
					break
				case kFLOAT:
					fprintf ref_num, "/N=(128,128) $wave_name = enoise(1.0)\n"
					break
				case kDOUBLE:
					fprintf ref_num, "/D/N=(128,128) $wave_name = enoise(1.0)\n"
					break
			endswitch
			fprintf ref_num, "//\t\t//- leave current df and restore previous\n"
			fprintf ref_num, "//\t\ttango_leave_df(current_df)\n"
			fprintf ref_num, "//\t\t//- build full path to the source wave (i.e. wave location)\n"
			fprintf ref_num, "//\t\twave_path += \":\" + wave_name\n"
			fprintf ref_num, "//\t\t//- apply the value and check error\n"
			if (generic_int)
				fprintf ref_num, "//\t\tif (%s(dev_name, wave_path) == -1)\n", func_name
			else
				fprintf ref_num, "//\t\tif (%s(wave_path) == -1)\n", func_name
			endif
			break
	endswitch
	fprintf ref_num, "//\t\t\t//- an error occurred\n"
	fprintf ref_num, "//\t\t\treturn -1\n"
	fprintf ref_num, "//\t\tendif\n"
	fprintf ref_num, "//\t\t//- the value was successfully applied\n"
	fprintf ref_num, "//\t\treturn 0\n"
	fprintf ref_num, "//\tend\n"
	fprintf ref_num, "//==============================================================================\n"
	switch (format)
		case kSCALAR:
			if (generic_int)
				fprintf ref_num, "function %s (dev, value)\n", func_name
				fprintf ref_num, "\tString dev\n"
			else
				fprintf ref_num, "function %s (value)\n", func_name
			endif
			switch (type)
				case kSTRING:
					fprintf ref_num, "\tString value\n"
					break 
				default:
					fprintf ref_num, "\tVariable value\n"
					break 
			endswitch
			break
		case kSPECTRUM:
		case kIMAGE:
			if (generic_int)
				fprintf ref_num, "function %s (dev, src_path)\n", func_name
				fprintf ref_num, "\tString dev\n"
			else
				fprintf ref_num, "function %s (src_path)\n", func_name
			endif
			fprintf ref_num, "\tString src_path\n"
			break
	endswitch
	fprintf ref_num, "\tStruct AttributeValue av\n"
	if (generic_int)
		fprintf ref_num, "\ttango_init_attr_val(av, dev=dev, attr=\"%s\"", attr_name
	else
		fprintf ref_num, "\ttango_init_attr_val(av, dev=\"%s\", attr=\"%s\"", dev_name, attr_name
	endif
	switch (format)
		case kSCALAR:
			switch (type)
				case kSTRING:
					fprintf ref_num, ", sval=value)\n"
					break 
				default:
					fprintf ref_num, ", nval=value)\n"
					break 
			endswitch
			break
		case kSPECTRUM:
		case kIMAGE:
			fprintf ref_num, ", path=src_path)\n"
			break
	endswitch
	fprintf ref_num, "\tif (tango_write_attr(av) == -1)\n"
	fprintf ref_num, "\t\ttango_show_error()\n"
	fprintf ref_num, "\t\treturn -1\n"
	fprintf ref_num, "\tendif\n"
	fprintf ref_num, "\treturn 0\n"
	fprintf ref_num, "end\n\n"
	return 0
end

//==============================================================================
// tango_generate_get_attribute
//==============================================================================
function  tango_generate_get_attribute (ref_num, prefix, dev_name, attr_name, format, type, generic_int)
	Variable ref_num
	String prefix
	String dev_name
	String attr_name
	Variable format
	Variable type
	Variable generic_int
	String tmp_attr_name = UpperStr(attr_name)[0] + attr_name[1, strlen(attr_name) - 1]
	String func_name = prefix + "Get" + tmp_attr_name
	if (strlen(func_name) > 31)
		print "WARNING: function name <" + func_name + "> is too long - proc will not compile"
	endif
	fprintf ref_num, "//==============================================================================\n"
	fprintf ref_num, "// %s\n", func_name
	fprintf ref_num, "//==============================================================================\n"
	fprintf ref_num, "//\tFunction......reads the <%s> attribute\n", attr_name
	fprintf ref_num, "//\tDev.class.....%s\n", tango_get_device_class (dev_name)
	fprintf ref_num, "//\tAttr.name.....%s\n", attr_name
	String desc = tango_get_attr_desc(dev_name, attr_name)
	Variable pos = strsearch(desc, "\n", 0)
	if (pos != -1)
		desc = desc[0, pos - 1]
	endif
	if (strlen(desc) > 57)
		desc = desc[0, 57] + "..."
	endif
	fprintf ref_num, "//\tAttr.desc.....%s\n", desc
	fprintf ref_num, "//\tAttr.Access...%s\n", tango_get_attr_access_str(tango_get_attr_access(dev_name, attr_name))
	fprintf ref_num, "//\tAttr.Format...%s\n", tango_get_attr_format_str(format)
	fprintf ref_num, "//\tAttr.Type.....%s\n", tango_get_attr_type_str(format, type)
	fprintf ref_num, "//\tExample.......the following code shows how to use this function\n"
	fprintf ref_num, "//------------------------------------------------------------------------------\n" 
	fprintf ref_num, "//\tfunction myFunction ()\n"
	if (generic_int)
		fprintf ref_num, "//\t\t//- the name of the target device\n"
		fprintf ref_num, "//\t\tString dev_name = \"my/tango/device\"\n"
	endif
	switch (format)
		case kSCALAR:
			switch (type)
				case kSTRING:
					fprintf ref_num, "//\t\t//- use a local 'string' to store the attribute value\n"
					fprintf ref_num, "//\t\tString attr_value\n"
					break 
				default:
					fprintf ref_num, "//\t\t//- use a local 'variable' to store the attribute value\n"
					fprintf ref_num, "//\t\tVariable attr_value\n"
					break 
			endswitch
			fprintf ref_num, "//\t\t//- read the attribute and check error\n"
			if (generic_int)
				fprintf ref_num, "//\t\tif (%s(dev_name, attr_value) == -1)\n", func_name
			else
				fprintf ref_num, "//\t\tif (%s(attr_value) == -1)\n", func_name
			endif
			fprintf ref_num, "//\t\t\t//- an error occurred\n"
			fprintf ref_num, "//\t\t\treturn -1\n"
			fprintf ref_num, "//\t\tendif\n"
			fprintf ref_num, "//\t\t//- the value was successfully read \n"
			fprintf ref_num, "//\t\t//- <attr_value> now contains the attribute value\n"
			break
		case kSPECTRUM:
			fprintf ref_num, "//\t\t//- tell the tango binding where to place the '1D destination wave'\n"
			fprintf ref_num, "//\t\tString wave_path = \"root:mydatafolder\"\n"
			fprintf ref_num, "//\t\t//- read the spectrum attribute and check error\n"
			if (generic_int)
				fprintf ref_num, "//\t\tif (%s(dev_name, wave_path) == -1)\n", func_name
			else
				fprintf ref_num, "//\t\tif (%s(wave_path) == -1)\n", func_name
			endif
			fprintf ref_num, "//\t\t\t//- an error occurred\n"
			fprintf ref_num, "//\t\t\treturn -1\n"
			fprintf ref_num, "//\t\tendif\n"
			fprintf ref_num, "//\t\t//- the spectrum attribute was successfully read \n"
			fprintf ref_num, "//\t\t//- <wave_path> now contains the full path to the wave containing the attr value\n"
			if (type == kSTRING) 
				fprintf ref_num, "//\t\tWAVE/T %s_wave = $wave_path\n", LowerStr(attr_name)
			else
				fprintf ref_num, "//\t\tWAVE %s_wave = $wave_path\n", LowerStr(attr_name)
			endif
			break
		case kIMAGE:
			fprintf ref_num, "//\t\t//- tell the tango binding where to place the '2D destination wave'\n"
			fprintf ref_num, "//\t\tString wave_path = \"root:mydatafolder:my_image\"\n"
			fprintf ref_num, "//\t\t//- read the image attribute and check error\n"
			if (generic_int)
				fprintf ref_num, "//\t\tif (%s(dev_name, wave_path) == -1)\n", func_name
			else
				fprintf ref_num, "//\t\tif (%s(wave_path) == -1)\n", func_name
			endif
			fprintf ref_num, "//\t\t\t//- an error occurred\n"
			fprintf ref_num, "//\t\t\treturn -1\n"
			fprintf ref_num, "//\t\tendif\n"
			fprintf ref_num, "//\t\t//- the image attribute was successfully read \n"
			fprintf ref_num, "//\t\t//- <wave_path> now contains the path to the wave containing the attr value\n"
			if (type == kSTRING) 
				fprintf ref_num, "//\t\tWAVE/T %s_wave = $wave_path\n", LowerStr(attr_name)
			else
				fprintf ref_num, "//\t\tWAVE %s_wave = $wave_path\n", LowerStr(attr_name)
			endif
			break
	endswitch
	fprintf ref_num, "//\t\t//...\n"
	fprintf ref_num, "//\t\treturn 0\n"
	fprintf ref_num, "//\tend\n"
	fprintf ref_num, "//==============================================================================\n"
	switch (format)
		case kSCALAR:
			if (generic_int)
				fprintf ref_num, "function %s (dev, value)\n", func_name
				fprintf ref_num, "\tString dev\n"
			else
				fprintf ref_num, "function %s (value)\n", func_name
			endif
			switch (type)
				case kSTRING:
					fprintf ref_num, "\tString& value\n"
					break 
				default:
					fprintf ref_num, "\tVariable& value\n"
					break
			endswitch
			break
		case kSPECTRUM:
		case kIMAGE:
			if (generic_int)
				fprintf ref_num, "function %s (dev, dest_path)\n", func_name
				fprintf ref_num, "\tString dev\n"
			else
				fprintf ref_num, "function %s (dest_path)\n", func_name
			endif
			fprintf ref_num, "\tString& dest_path\n"
			break
	endswitch
	fprintf ref_num, "\tStruct AttributeValue av\n"
	if (generic_int)
		fprintf ref_num, "\ttango_init_attr_val(av, dev=dev, attr=\"%s\"", attr_name
	else
		fprintf ref_num, "\ttango_init_attr_val(av, dev=\"%s\", attr=\"%s\"", dev_name, attr_name
	endif
	switch (format)
		case kSCALAR:
			fprintf ref_num, ")\n"
			break
		case kSPECTRUM:
		case kIMAGE:
			fprintf ref_num, ", path=dest_path)\n"
			break
	endswitch
	fprintf ref_num, "\tif (tango_read_attr(av) == -1)\n"
	fprintf ref_num, "\t\ttango_show_error()\n"
	switch (format)
		case kSCALAR:
			switch (type)
				case kSTRING:
					fprintf ref_num, "\t\tvalue = \"\"\n"
					break 
				default:
					fprintf ref_num, "\t\tvalue = NAN\n"
					break 
					break
			endswitch
			break
		case kSPECTRUM:
		case kIMAGE:
			fprintf ref_num, "\t\tdest_path = \"\"\n"
			break
	endswitch
	fprintf ref_num, "\t\treturn -1\n"
	fprintf ref_num, "\tendif\n"
	switch (format)
		case kSCALAR:
			switch (type)
				case kSTRING:
					fprintf ref_num, "\tvalue = av.str_val\n"
					break 
				default:
					fprintf ref_num, "\tvalue = av.var_val\n"
					break 
					break
			endswitch
			break
		case kSPECTRUM:
		case kIMAGE:
			fprintf ref_num, "\tdest_path = av.val_path\n"
			break
	endswitch
	fprintf ref_num, "\treturn 0\n"
	fprintf ref_num, "end\n\n"
end

//==============================================================================
// tango_generate_exec_command
//==============================================================================
function  tango_generate_exec_command (ref_num, prefix, dev_name, cmd_name, argin_type, argout_type, generic_int)
	Variable ref_num
	String prefix
	String dev_name
	String cmd_name
	Variable argin_type
	Variable argout_type
	Variable generic_int
	String tmp_cmd_name = UpperStr(cmd_name)[0] + cmd_name[1, strlen(cmd_name) - 1]
	String func_name = prefix + tmp_cmd_name
	if (strlen(func_name) > 31)
		print "WARNING: function name <" + func_name + "> is too long - proc will not compile"
	endif
	fprintf ref_num, "//==============================================================================\n"
	fprintf ref_num, "// %s\n", func_name
	fprintf ref_num, "//==============================================================================\n"
	fprintf ref_num, "//\tFunction.......executes the <%s> command\n", cmd_name
	fprintf ref_num, "//\tDev.class......%s\n", tango_get_device_class (dev_name)
	fprintf ref_num, "//\tCmd.name.......%s\n", cmd_name
	fprintf ref_num, "//\tArg-in type....%s\n", tango_get_cmd_argio_type_str(argin_type)
	String argin_desc = tango_get_cmd_argin_desc(dev_name, cmd_name)
	Variable pos = strsearch(argin_desc, "\n", 0)
	if (pos != -1)
		argin_desc = argin_desc[0, pos - 1]
	endif
	if (strlen(argin_desc) > 57)
		argin_desc = argin_desc[0, 57] + "..."
	endif
	fprintf ref_num, "//\tArg-in desc....%s\n", argin_desc
	fprintf ref_num, "//\tArg-out type...%s\n", tango_get_cmd_argio_type_str(argout_type)
	String argout_desc = tango_get_cmd_argout_desc(dev_name, cmd_name)
	pos = strsearch(argout_desc, "\n", 0)
	if (pos != -1)
		argout_desc = argout_desc[0, pos - 1]
	endif
	if (strlen(argout_desc) > 57)
		argout_desc = argout_desc[0, 57] + "..."
	endif
	fprintf ref_num, "//\tArg-out desc...%s\n", argout_desc
	fprintf ref_num, "//\tExample........the following code shows how to use this function\n"
	fprintf ref_num, "//------------------------------------------------------------------------------\n" 
	fprintf ref_num, "//\tfunction myFunction ()\n"
	if (generic_int)
		fprintf ref_num, "//\t\tString dev_name = \"my/tango/device\"\n"
	endif
	switch (argin_type)
		case kDEVVOID:
			break
		case kDEVSTATE:
		case kDEVBOOLEAN:
		case kDEVSHORT:
		case kDEVLONG:
		case kDEVFLOAT:
		case kDEVDOUBLE:
		case kDEVUSHORT:
		case kDEVULONG:
		case kDEVUCHAR:
			fprintf ref_num, "//\t\t//- specify the argin value (i.e. the value to be passed to the cmd)\n"
			fprintf ref_num, "//\t\t//- it can a local or a global variable (global in this example)\n"
			fprintf ref_num, "//\t\tNVAR argin_val = root:mydatafolder:my_val\n"
			break
		case kDEVSTRING:
			fprintf ref_num, "//\t\t//- specify the argin value (i.e. the value to be passed to the cmd)\n"
			fprintf ref_num, "//\t\t//- it can a local or a global string (global in this example)\n"
			fprintf ref_num, "//\t\tSVAR argin_str = root:mydatafolder:my_str\n"
			break
		case kDEVVARCHARARRAY:
		case kDEVVARSHORTARRAY:
		case kDEVVARLONGARRAY:
		case kDEVVARFLOATARRAY:
		case kDEVVARDOUBLEARRAY:
		case kDEVVARUSHORTARRAY:
		case kDEVVARULONGARRAY:
		case kDEVVARBOOLEANARRAY:
		case kDEVVARSTRINGARRAY:
			fprintf ref_num, "//\t\t//- specify the path to the argin wave (i.e. wave to be passed to the cmd)\n"
			fprintf ref_num, "//\t\tString argin_path = \"root:mydatafolder:my_wave\"\n"
			break
		case kDEVVARLONGSTRINGARRAY:
		case kDEVVARDOUBLESTRINGARRAY:
			fprintf ref_num, "//\t\t//- specify the path to the argin 1D numeric wave (i.e. wave to be passed to the cmd)\n"
			fprintf ref_num, "//\t\tString num_argin_path = \"root:mydatafolder:my_num_wave\"\n"
			fprintf ref_num, "//\t\t//- specify the path to the argin 1D text wave (i.e. wave to be passed to the cmd)\n"
			fprintf ref_num, "//\t\tString txt_argin_path = \"root:mydatafolder:my_txt_wave\"\n"
			break
	endswitch
	switch (argout_type)
		case kDEVVOID:
			break
		case kDEVSTATE:
		case kDEVBOOLEAN:
		case kDEVSHORT:
		case kDEVLONG:
		case kDEVFLOAT:
		case kDEVDOUBLE:
		case kDEVUSHORT:
		case kDEVULONG:
		case kDEVUCHAR:
			fprintf ref_num, "//\t\t//- use a local 'variable' to store the command result\n"
			fprintf ref_num, "//\t\tVariable argout_val\n"
			break
		case kDEVSTRING:
			fprintf ref_num, "//\t\t//- use a local 'string' to store the command result\n"
			fprintf ref_num, "//\t\tString argout_str\n"
			break
		case kDEVVARCHARARRAY:
		case kDEVVARSHORTARRAY:
		case kDEVVARLONGARRAY:
		case kDEVVARFLOATARRAY:
		case kDEVVARDOUBLEARRAY:
		case kDEVVARUSHORTARRAY:
		case kDEVVARULONGARRAY:
		case kDEVVARBOOLEANARRAY:
		case kDEVVARSTRINGARRAY:
			fprintf ref_num, "//\t\t//- tell the tango binding where to place the command result\n"
			fprintf ref_num, "//\t\tString argout_path = \"root:mydatafolder\"\n"
			break
		case kDEVVARLONGSTRINGARRAY:
		case kDEVVARDOUBLESTRINGARRAY:
			fprintf ref_num, "//\t\t//- tell the tango binding where to place the numeric part of the command result\n"
			fprintf ref_num, "//\t\tString num_argout_path = \"root:mydatafolder\"\n"
			fprintf ref_num, "//\t\t//- tell the tango binding where to place the text part of the command result\n"
			fprintf ref_num, "//\t\tString txt_argout_path = \"root:mydatafolder\"\n"
			break
	endswitch
	fprintf ref_num, "//\t\t//- execute the command and check error\n"
	if (generic_int)
		fprintf ref_num, "//\t\tif (%s(dev_name", func_name
		if (argin_type != kDEVVOID || argout_type != kDEVVOID)
			fprintf ref_num, ", "
		endif
	else
		fprintf ref_num, "//\t\tif (%s(", func_name
	endif
	switch (argin_type)
		case kDEVVOID:
			break
		case kDEVSTATE:
		case kDEVBOOLEAN:
		case kDEVSHORT:
		case kDEVLONG:
		case kDEVFLOAT:
		case kDEVDOUBLE:
		case kDEVUSHORT:
		case kDEVULONG:
		case kDEVUCHAR:
		case kDEVSTRING:
			fprintf ref_num, "argin_val"
			break
		case kDEVSTRING:
			fprintf ref_num, "argin_str"
			break
		case kDEVVARCHARARRAY:
		case kDEVVARSHORTARRAY:
		case kDEVVARLONGARRAY:
		case kDEVVARFLOATARRAY:
		case kDEVVARDOUBLEARRAY:
		case kDEVVARUSHORTARRAY:
		case kDEVVARULONGARRAY:
		case kDEVVARBOOLEANARRAY:
		case kDEVVARSTRINGARRAY:
			fprintf ref_num, "argin_path"
			break
		case kDEVVARLONGSTRINGARRAY:
		case kDEVVARDOUBLESTRINGARRAY:
			fprintf ref_num, "num_argin_path, txt_argin_path"
			break
	endswitch
	if (argin_type != kDEVVOID && argout_type != kDEVVOID)
		fprintf ref_num, ", "
	endif
	switch (argout_type)
		case kDEVVOID:
			break
		case kDEVSTATE:
		case kDEVBOOLEAN:
		case kDEVSHORT:
		case kDEVLONG:
		case kDEVFLOAT:
		case kDEVDOUBLE:
		case kDEVUSHORT:
		case kDEVULONG:
		case kDEVUCHAR:
			fprintf ref_num, "argout_val"
			break
		case kDEVSTRING:
			fprintf ref_num, "argout_str"
			break
		case kDEVVARCHARARRAY:
		case kDEVVARSHORTARRAY:
		case kDEVVARLONGARRAY:
		case kDEVVARFLOATARRAY:
		case kDEVVARDOUBLEARRAY:
		case kDEVVARUSHORTARRAY:
		case kDEVVARULONGARRAY:
		case kDEVVARBOOLEANARRAY:
		case kDEVVARSTRINGARRAY:
			fprintf ref_num, "argout_path"
			break
		case kDEVVARLONGSTRINGARRAY:
		case kDEVVARDOUBLESTRINGARRAY:
			fprintf ref_num, "num_argout_path, txt_argout_path"
			break
	endswitch
	fprintf ref_num, ") == -1)\n"
	fprintf ref_num, "//\t\t\t//- an error occurred\n"
	fprintf ref_num, "//\t\t\treturn -1\n"
	fprintf ref_num, "//\t\tendif\n"
	fprintf ref_num, "//\t\t//- the command was successfully executed\n"
	switch (argout_type)
		case kDEVVOID:
			break
		case kDEVSTATE:
		case kDEVBOOLEAN:
		case kDEVSHORT:
		case kDEVLONG:
		case kDEVFLOAT:
		case kDEVDOUBLE:
		case kDEVUSHORT:
		case kDEVULONG:
		case kDEVUCHAR:
			fprintf ref_num, "//\t\t//- <argout_val> now contains the command result\n"
			break
		case kDEVSTRING:
			fprintf ref_num, "//\t\t//- <argout_str> now contains the command result\n"
			break
		case kDEVVARCHARARRAY:
		case kDEVVARSHORTARRAY:
		case kDEVVARLONGARRAY:
		case kDEVVARFLOATARRAY:
		case kDEVVARDOUBLEARRAY:
		case kDEVVARUSHORTARRAY:
		case kDEVVARULONGARRAY:
		case kDEVVARBOOLEANARRAY:
			fprintf ref_num, "//\t\t//- <argout_path> now contains the path to the command result\n"
			fprintf ref_num, "//\t\tWAVE cmd_result = $argout_path\n"
			break
		case kDEVVARSTRINGARRAY:
			fprintf ref_num, "//\t\t//- <argout_path> now contains the path to the command result\n"
			fprintf ref_num, "//\t\tWAVE/T cmd_result = $argout_path\n"
			break
		case kDEVVARLONGSTRINGARRAY:
		case kDEVVARDOUBLESTRINGARRAY:
			fprintf ref_num, "//\t\t//- <num_argout_path> now contains the path to the numeric part of the command result\n"
			fprintf ref_num, "//\t\t//- <txt_argout_path> now contains the path to the text part of the command result\n"
			fprintf ref_num, "//\t\tWAVE num_cmd_result = $num_argout_path\n"
			fprintf ref_num, "//\t\tWAVE/T txt_cmd_result = $txt_argout_path\n"
			break
			break
	endswitch
	fprintf ref_num, "//\t\t//...\n"
	fprintf ref_num, "//\t\treturn 0\n"
	fprintf ref_num, "//\tend\n"
	fprintf ref_num, "//==============================================================================\n"
	if (generic_int)
		fprintf ref_num, "function %s (dev_name", func_name
	else
		fprintf ref_num, "function %s (", func_name
	endif	
	if (generic_int && ((argin_type != kDEVVOID) || (argout_type != kDEVVOID)))
		fprintf ref_num, ", "
	endif
	switch (argin_type)
		case kDEVVOID:
			break
		case kDEVSTATE:
		case kDEVBOOLEAN:
		case kDEVSHORT:
		case kDEVLONG:
		case kDEVFLOAT:
		case kDEVDOUBLE:
		case kDEVUSHORT:
		case kDEVULONG:
		case kDEVUCHAR:
			fprintf ref_num, "in_val"
			break
		case kDEVSTRING:
			fprintf ref_num, "in_str"
			break
		case kDEVVARCHARARRAY:
		case kDEVVARSHORTARRAY:
		case kDEVVARLONGARRAY:
		case kDEVVARFLOATARRAY:
		case kDEVVARDOUBLEARRAY:
		case kDEVVARUSHORTARRAY:
		case kDEVVARULONGARRAY:
		case kDEVVARBOOLEANARRAY:
		case kDEVVARSTRINGARRAY:
			fprintf ref_num, "in_wave_path"
			break
		case kDEVVARLONGSTRINGARRAY:
		case kDEVVARDOUBLESTRINGARRAY:
			fprintf ref_num, "in_num_wave_path, in_str_wave_path"
			break
	endswitch
	if ((argin_type != kDEVVOID) && (argout_type != kDEVVOID))
		fprintf ref_num, ", "
	endif
	switch (argout_type)
		case kDEVVOID:
			break
		case kDEVSTATE:
		case kDEVBOOLEAN:
		case kDEVSHORT:
		case kDEVLONG:
		case kDEVFLOAT:
		case kDEVDOUBLE:
		case kDEVUSHORT:
		case kDEVULONG:
		case kDEVUCHAR:
			fprintf ref_num, "out_val"
			break
		case kDEVSTRING:
			fprintf ref_num, "out_str"
			break
		case kDEVVARCHARARRAY:
		case kDEVVARSHORTARRAY:
		case kDEVVARLONGARRAY:
		case kDEVVARFLOATARRAY:
		case kDEVVARDOUBLEARRAY:
		case kDEVVARUSHORTARRAY:
		case kDEVVARULONGARRAY:
		case kDEVVARBOOLEANARRAY:
		case kDEVVARSTRINGARRAY:
			fprintf ref_num, "out_wave_path"
			break
		case kDEVVARLONGSTRINGARRAY:
		case kDEVVARDOUBLESTRINGARRAY:
			fprintf ref_num, "out_num_wave_path, out_str_wave_path"
			break
	endswitch
	fprintf ref_num, ")\n"
	if (generic_int)
		fprintf ref_num, "\tString dev_name\n"
	endif	
	switch (argin_type)
		case kDEVVOID:
			break
		case kDEVSTATE:
		case kDEVBOOLEAN:
		case kDEVSHORT:
		case kDEVLONG:
		case kDEVFLOAT:
		case kDEVDOUBLE:
		case kDEVUSHORT:
		case kDEVULONG:
		case kDEVUCHAR:
			fprintf ref_num, "\tVariable in_val\n"
			break
		case kDEVSTRING:
			fprintf ref_num, "\tString in_str\n"
			break
		case kDEVVARCHARARRAY:
		case kDEVVARSHORTARRAY:
		case kDEVVARLONGARRAY:
		case kDEVVARFLOATARRAY:
		case kDEVVARDOUBLEARRAY:
		case kDEVVARUSHORTARRAY:
		case kDEVVARULONGARRAY:
		case kDEVVARBOOLEANARRAY:
		case kDEVVARSTRINGARRAY:
			fprintf ref_num, "\tString in_wave_path\n"
			break
		case kDEVVARLONGSTRINGARRAY:
		case kDEVVARDOUBLESTRINGARRAY:
			fprintf ref_num, "\tString in_num_wave_path\n"
			fprintf ref_num, "\tString in_str_wave_path\n"
			break
	endswitch
	switch (argout_type)
		case kDEVVOID:
			break
		case kDEVSTATE:
		case kDEVBOOLEAN:
		case kDEVSHORT:
		case kDEVLONG:
		case kDEVFLOAT:
		case kDEVDOUBLE:
		case kDEVUSHORT:
		case kDEVULONG:
		case kDEVUCHAR:
			fprintf ref_num, "\tVariable& out_val\n"
			break
		case kDEVSTRING:
			fprintf ref_num, "\tString& out_str\n"
			break
		case kDEVVARCHARARRAY:
		case kDEVVARSHORTARRAY:
		case kDEVVARLONGARRAY:
		case kDEVVARFLOATARRAY:
		case kDEVVARDOUBLEARRAY:
		case kDEVVARUSHORTARRAY:
		case kDEVVARULONGARRAY:
		case kDEVVARBOOLEANARRAY:
		case kDEVVARSTRINGARRAY:
			fprintf ref_num, "\tString& out_wave_path\n"
			break
		case kDEVVARLONGSTRINGARRAY:
		case kDEVVARDOUBLESTRINGARRAY:
			fprintf ref_num, "\tString& out_num_wave_path\n"
			fprintf ref_num, "\tString& out_str_wave_path\n"
			break
	endswitch
	if (argin_type != kDEVVOID)
		fprintf ref_num, "\tStruct CmdArgIO cai\n"
	endif
	switch (argin_type)
		case kDEVVOID:
			break
		case kDEVSTATE:
		case kDEVBOOLEAN:
		case kDEVSHORT:
		case kDEVLONG:
		case kDEVFLOAT:
		case kDEVDOUBLE:
		case kDEVUSHORT:
		case kDEVULONG:
		case kDEVUCHAR:
			fprintf ref_num, "\tcai.var = in_val\n"
			break
		case kDEVSTRING:
			fprintf ref_num, "\tcai.str = in_str\n"
			break
		case kDEVVARCHARARRAY:
		case kDEVVARSHORTARRAY:
		case kDEVVARLONGARRAY:
		case kDEVVARFLOATARRAY:
		case kDEVVARDOUBLEARRAY:
		case kDEVVARUSHORTARRAY:
		case kDEVVARULONGARRAY:
		case kDEVVARBOOLEANARRAY:
			fprintf ref_num, "\tcai.num_wave_path = in_wave_path\n"
			break
		case kDEVVARSTRINGARRAY:
			fprintf ref_num, "\tcai.str_wave_path = in_wave_path\n"
			break
		case kDEVVARLONGSTRINGARRAY:
		case kDEVVARDOUBLESTRINGARRAY:
			fprintf ref_num, "\tcai.num_wave_path = in_num_wave_path\n"
			fprintf ref_num, "\tcai.str_wave_path = in_str_wave_path\n"
			break
	endswitch  
	if (argout_type != kDEVVOID)  
		fprintf ref_num, "\tStruct CmdArgIO cao\n"
	endif
	switch (argout_type)
		case kDEVVARCHARARRAY:
		case kDEVVARSHORTARRAY:
		case kDEVVARLONGARRAY:
		case kDEVVARFLOATARRAY:
		case kDEVVARDOUBLEARRAY:
		case kDEVVARUSHORTARRAY:
		case kDEVVARULONGARRAY:
		case kDEVVARBOOLEANARRAY:
			fprintf ref_num, "\tcao.num_wave_path = out_wave_path\n"
			break
		case kDEVVARSTRINGARRAY:
			fprintf ref_num, "\tcao.str_wave_path = out_wave_path\n"
			break
		case kDEVVARLONGSTRINGARRAY:
		case kDEVVARDOUBLESTRINGARRAY:
			fprintf ref_num, "\tcao.num_wave_path = out_num_wave_path\n"
			fprintf ref_num, "\tcao.str_wave_path = out_str_wave_path\n"
			break
	endswitch
	fprintf ref_num, "\tif (tango_cmd_inout("
	if (generic_int)
		fprintf ref_num, "dev_name, "
	else
		fprintf ref_num, "\"%s\", ", dev_name
	endif	
	fprintf ref_num, "\"%s\"", cmd_name
	if (argin_type != kDEVVOID)  
		fprintf ref_num, ", arg_in = cai"
	endif
	if (argout_type != kDEVVOID)  
		fprintf ref_num, ", arg_out = cao"
	endif
	fprintf ref_num, ") == -1)\n"
	fprintf ref_num, "\t\ttango_show_error()\n"
	fprintf ref_num, "\t\treturn -1\n"
	fprintf ref_num, "\tendif\n"
	switch (argout_type)
		case kDEVVOID:
			break
		case kDEVSTATE:
		case kDEVBOOLEAN:
		case kDEVSHORT:
		case kDEVLONG:
		case kDEVFLOAT:
		case kDEVDOUBLE:
		case kDEVUSHORT:
		case kDEVULONG:
		case kDEVUCHAR:
			fprintf ref_num, "\tout_val = cao.var\n"
			break
		case kDEVSTRING:
			fprintf ref_num, "\tout_str = cao.str\n"
			break
		case kDEVVARCHARARRAY:
		case kDEVVARSHORTARRAY:
		case kDEVVARLONGARRAY:
		case kDEVVARFLOATARRAY:
		case kDEVVARDOUBLEARRAY:
		case kDEVVARUSHORTARRAY:
		case kDEVVARULONGARRAY:
		case kDEVVARBOOLEANARRAY:
			fprintf ref_num, "\tout_wave_path = cao.num_wave_path\n"
			break
		case kDEVVARSTRINGARRAY:
			fprintf ref_num, "\tout_wave_path = cao.str_wave_path\n"
			break
		case kDEVVARLONGSTRINGARRAY:
		case kDEVVARDOUBLESTRINGARRAY:
			fprintf ref_num, "\tout_num_wave_path = cao.num_wave_path\n"
			fprintf ref_num, "\tout_str_wave_path = cao.str_wave_path\n"
			break
	endswitch
	fprintf ref_num, "\treturn 0\n"
	fprintf ref_num, "end\n\n"
	return 0
end

//==============================================================================
// tango_generate_open_procedure_file
//==============================================================================
Function tango_generate_open_proc_file (file, prefix, ref_num, full_path)
	String file
	String prefix
	Variable & ref_num
	String &  full_path
	ref_num = 0
	full_path = ""
	Variable rf
	String msg = "Specify destination file location. Existing file will be overwritten."
	//- open file
	Open/Z=2/M=msg/T=".ipf" rf as file
	//- store results from open in a safe place
	Variable err = V_flag
	if (err == -1)
		return -1
	endif
	if (err != 0)
		String err_str   = "Could not create procedure file.\n"
		err_str  += "Be sure <" + file +"> is not already open then retry.\n"
		err_str  += "Aborting code generation..." 
		tango_display_error_str (err_str)
		return -1
	endif
	ref_num =  rf
	full_path = S_fileName
	return 0
end

//==============================================================================
// tango_generate_close_procedure_file
//==============================================================================
Function tango_generate_close_proc_file (ref_num)
	Variable ref_num
	Close ref_num
end

